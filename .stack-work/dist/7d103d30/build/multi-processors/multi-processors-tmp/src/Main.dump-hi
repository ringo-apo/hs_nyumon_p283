
==================== FINAL INTERFACE ====================
2018-12-01 14:39:14.215961 UTC

interface main:Main 8044
  interface hash: 05e7097d1dce8d3b62571867b3921627
  ABI hash: e775184aff90d8d10e0270cd913e0c4f
  export-list hash: 20aa262fca08b7b025ca67385d6da5cc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 90d24efd55968356eaf2e13446af50c5
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.fib
  Main.main
  Main.parallelFib
module dependencies:
package dependencies: abstract-par-0.3.3 array-0.5.2.0
                      base-4.11.1.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      monad-par-0.3.4.8 monad-par-extras-0.3.3
orphans: monad-par-0.3.4.8:Control.Monad.Par.Scheds.Trace
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Num 5de8df0185e7e8d8ec29b3c61e2c8606
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  base-4.11.1.0:System.Environment c732895574a1a8842b9839d87f73abde
import  -/  base-4.11.1.0:System.IO 4c8fe011020182bbb838fae9b78bbe23
import  -/  base-4.11.1.0:Text.Read 5c288a0919cb418cf58278e23fdb845d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  monad-par-0.3.4.8:Control.Monad.Par 7362a42d8df8a40bd31b324d4f56c6f0
import  -/  monad-par-0.3.4.8:Control.Monad.Par.Scheds.Trace 5a4d00fb539c1e50794c0b9b6cdb1b3b
import  -/  monad-par-0.3.4.8:Control.Monad.Par.Scheds.TraceInternal 691df1ffbe3f1c931ccdbb203d3a8ce2
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
1bcb5c97858d79b53eb133aa4985e1a4
  $wfib :: GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
65b419a9f5acb7783f09546cc8763828
  $wparallelFib :: GHC.Prim.Int# -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case ww of ds {
                   DEFAULT
                   -> let {
                        a1 :: GHC.Types.Int
                        = case Main.$wfib (GHC.Prim.-# ds 2#) of ww1 { DEFAULT ->
                          GHC.Types.I# ww1 }
                      } in
                      Control.Monad.Par.Scheds.TraceInternal.runPar
                        @ GHC.Types.Int
                        (let {
                           a2 :: GHC.Types.Int
                           = case Main.$wfib (GHC.Prim.-# ds 1#) of ww1 { DEFAULT ->
                             GHC.Types.I# ww1 }
                         } in
                         (\ (c :: GHC.Types.Int
                                  -> Control.Monad.Par.Scheds.TraceInternal.Trace) ->
                          Control.Monad.Par.Scheds.TraceInternal.New
                            @ GHC.Types.Int
                            (Control.Monad.Par.Scheds.TraceInternal.Empty @ GHC.Types.Int)
                            (\ (a3 :: Control.Monad.Par.Scheds.TraceInternal.IVar
                                        GHC.Types.Int) ->
                             Control.Monad.Par.Scheds.TraceInternal.Fork
                               (case a2 of ds1 { GHC.Types.I# ipv ->
                                Control.Monad.Par.Scheds.TraceInternal.Put
                                  @ GHC.Types.Int
                                  a3
                                  ds1
                                  Control.Monad.Par.Scheds.TraceInternal.Done })
                               (Control.Monad.Par.Scheds.TraceInternal.New
                                  @ GHC.Types.Int
                                  (Control.Monad.Par.Scheds.TraceInternal.Empty @ GHC.Types.Int)
                                  (\ (a4 :: Control.Monad.Par.Scheds.TraceInternal.IVar
                                              GHC.Types.Int) ->
                                   Control.Monad.Par.Scheds.TraceInternal.Fork
                                     (case a1 of ds1 { GHC.Types.I# ipv ->
                                      Control.Monad.Par.Scheds.TraceInternal.Put
                                        @ GHC.Types.Int
                                        a4
                                        ds1
                                        Control.Monad.Par.Scheds.TraceInternal.Done })
                                     (Control.Monad.Par.Scheds.TraceInternal.Get
                                        @ GHC.Types.Int
                                        a3
                                        (\ (a5 :: GHC.Types.Int) ->
                                         Control.Monad.Par.Scheds.TraceInternal.Get
                                           @ GHC.Types.Int
                                           a4
                                           (\ (a6 :: GHC.Types.Int) ->
                                            c (GHC.Num.$fNumInt_$c+ a5 a6))))))))
                           `cast`
                         (Sym (Control.Monad.Par.Scheds.TraceInternal.N:Par[0]
                                   <GHC.Types.Int>_R)))
                   0# -> Main.main5
                   1# -> Main.main4 }) -}
68c15c9af61d56f4e7979d958d104d5c
  fib :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Main.$wfib ww1 of ww2 { DEFAULT -> GHC.Types.I# ww2 } }) -}
3263e5583d8c3d475114c92b18bbdafe
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
346b3b4b88dfa5f6e5a3f103054c5022
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (case GHC.Base.map
                                @ [GHC.Types.Char]
                                @ GHC.Types.Int
                                Main.main7
                                ipv1 of wild {
                           [] -> case Main.main6 ret_ty GHC.Base.String of {}
                           : n ds
                           -> case n of ww { GHC.Types.I# ww1 ->
                              case Main.$wparallelFib ww1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt
                                     0#
                                     ww3
                                     (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } } } })
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv2 } }) -}
e1ea68e21a2cb2bfc720f927a3e33275
  main10 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt_$sreadNumber
                   GHC.Read.$fReadInt2
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither7 @ GHC.Types.Int)) -}
4e427c29b6910893e6113f61070b21cb
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
b5e0e025dcfd83a948d4422212b9b4e0
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
0d0839947866262077dd9f829943c151
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DONE"#) -}
6f763e3896181c86a9a6ac9b543c0143
  main4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
b15c5f5d5229235c436174aa39549c42
  main5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
6e41e2e6b24f4f716bacdb607326bbc2
  main6 :: (GHC.Types.Int)
  {- Strictness: x -}
ca8600f1ff4f4099df150fabb146976f
  main7 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Main.main10
                           s) of wild {
                   [] -> Main.main9
                   : x ds
                   -> case ds of wild1 { [] -> x : ipv ipv1 -> Main.main8 } }) -}
628b264a2fd0abb9dc4eb6381cdf3030
  main8 :: GHC.Types.Int
  {- Strictness: x -}
5b79593223c9d86c6e162d2f11e9086f
  main9 :: GHC.Types.Int
  {- Strictness: x -}
f5a95050eadcd75037241ea776491300
  parallelFib :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wparallelFib ww1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

